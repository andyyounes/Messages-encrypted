/* This program calculates the Key for two persons
using the Diffie-Hellman Key exchange algorithm using C++ */
#include <cmath> // library for math
#include <iostream> // library for including input and output stream

using namespace std;

// Power function to return value of a ^ b mod P
long long int power(long long int m1, long long int m2,
					long long int P)
{
	if (m2 == 1)
		return m1;

	else
		return (((long long int)pow(m1, m2)) % P);
}

// Driver program
int main()
{
	long long int P, G, x, m1, y, m2, km1, km2;

	// Both the persons will be agreed upon the
	// public keys G and P
	P = 23; // A prime number P is taken
	cout << "The value of P : " << P << endl;

	G = 9; // A primitive root for P, G is taken
	cout << "The value of G : " << G << endl;

	// motor 1 will choose the private key m1
	m1 = 4; // m1 is the chosen private key
	cout << "The private key a for Motor 1 : " << m1 << endl;

	x = power(G, m1, P); // gets the generated key

	// motor2 will choose the private key m2
	m2 = 3; // m2 is the chosen private key
	cout << "The private key b for Motor 2 : " << m2 << endl;

	y = power(G, m2, P); // gets the generated key

	// Generating the secret key after the exchange
	// of keys
	km1 = power(y, m1, P); // Secret key for Motor 1
	km2 = power(x, m2, P); // Secret key for Motor 2
	cout << "Secret key for the Motor 1 is : " << km1 << endl;

	cout << "Secret key for the Motor 2 is : " << km2 << endl;

	return 0;
}

